/// This code will be generated by Berp, but isn't yet.
/// The pieces here are necessary for the other parts of the project to work,
/// while we wait for the razor file to be finished.

use token::Token;

#[derive(Debug, PartialEq)]
pub enum TokenType {
    None,
    EOF,
    Empty,
    Comment,
    TagLine,
    FeatureLine,
    BackgroundLine,
    ScenarioLine,
    ScenarioOutlineLine,
    ExamplesLine,
    StepLine,
    DocStringSeparator,
    TableRow,
    Language,
    Other,
}

pub enum RuleType {
    None,
    Feature, // Feature! := Feature_Header Background? Scenario_Definition*
    Feature_Header, // Feature_Header! := #Language? Tags? #FeatureLine Feature_Description
    Background, // Background! := #BackgroundLine Background_Description Scenario_Step*
    Scenario_Definition, // Scenario_Definition! := Tags? (Scenario | ScenarioOutline)
    Scenario, // Scenario! := #ScenarioLine Scenario_Description Scenario_Step*
    ScenarioOutline, // ScenarioOutline! := #ScenarioOutlineLine ScenarioOutline_Description ScenarioOutline_Step* Examples_Definition*
    Examples_Definition, // Examples_Definition! [#Empty|#Comment|#TagLine-&gt;#ExamplesLine] := Tags? Examples
    Examples, // Examples! := #ExamplesLine Examples_Description Examples_Table?
    Examples_Table, // Examples_Table! := #TableRow #TableRow*
    Scenario_Step, // Scenario_Step := Step
    ScenarioOutline_Step, // ScenarioOutline_Step := Step
    Step, // Step! := #StepLine Step_Arg?
    Step_Arg, // Step_Arg := (DataTable | DocString)
    DataTable, // DataTable! := #TableRow+
    DocString, // DocString! := #DocStringSeparator #Other* #DocStringSeparator
    Tags, // Tags! := #TagLine+
    Feature_Description, // Feature_Description := Description_Helper
    Background_Description, // Background_Description := Description_Helper
    Scenario_Description, // Scenario_Description := Description_Helper
    ScenarioOutline_Description, // ScenarioOutline_Description := Description_Helper
    Examples_Description, // Examples_Description := Description_Helper
    Description_Helper, // Description_Helper := #Empty* Description? #Comment*
    Description, // Description! := #Other+
}

pub trait Builder<T> {
    fn build(&self, token: Token);
    fn start_rule(&self, rule_type: RuleType);
    fn end_rule(&self, rule_type: RuleType);
    fn get_result(&self) -> T;
    fn reset(&self);
}

pub trait TokenScanner {
    fn read(&self) -> Token;
}


pub trait ITokenMatcher {
    fn match_EOF(&self, token: Token) -> bool;
    fn match_Empty(&self, token: Token) -> bool;
    fn match_Comment(&self, token: Token) -> bool;
    fn match_TagLine(&self, token: Token) -> bool;
    fn match_FeatureLine(&self, token: Token) -> bool;
    fn match_BackgroundLine(&self, token: Token) -> bool;
    fn match_ScenarioLine(&self, token: Token) -> bool;
    fn match_ScenarioOutlineLine(&self, token: Token) -> bool;
    fn match_ExamplesLine(&self, token: Token) -> bool;
    fn match_StepLine(&self, token: Token) -> bool;
    fn match_DocStringSeparator(&self, token: Token) -> bool;
    fn match_TableRow(&self, token: Token) -> bool;
    fn match_Language(&self, token: Token) -> bool;
    fn match_Other(&self, token: Token) -> bool;
    fn reset(&self, ) -> bool;
}
